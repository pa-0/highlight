.TH highlight 1 "2021-03-27" "Andre Simon" "user documentation"

.SH NAME
Highlight - a universal sourcecode to formatted text converter

.SH SYNOPSIS
.B highlight
[\fIOPTIONS\fR]... [\fIFILES\fR]...

.SH DESCRIPTION
.B Highlight
converts sourcecode to HTML, XHTML, RTF, ODT, LaTeX, TeX, BBCode, Pango markup, SVG, XTERM or ANSI escape sequences.
There are several colour themes available.
.B Highlight
recognizes keywords, numbers, strings, comments, symbols and preprocessor directives.
It supports about 180 programming languages, which are defined in Lua scripts.

.PP
It's easily possible to enhance highlight's database of programming languages and colour themes.
See the README file for details.
.SH GENERAL OPTIONS
.IP "\fB-B\fR, \fB--batch-recursive\fR=<\fIwildcard\fR>"
convert all files matching the wildcard (uses recursive search)
.IP "\fB-D\fR, \fB--data-dir\fR=<\fIpath\fR>"
set path to highlight data directory
.IP "\fB--config-file\fR=<\fIfile\fR>"
set path to a lang or theme file
.IP "\fB-h\fR, \fB--help\fR[=\fItopic\fR]"
print this help or a topic description
<topic> = [syntax, theme, plugin, config]
.IP "\fB-i\fR, \fB--input\fR=<\fIfile\fR>"
name of input file
.IP "\fB-o\fR, \fB--output\fR=<\fIfile\fR>"
name of output file
.IP "\fB-d\fR, \fB--outdir\fR=<\fIoutput directory\fR>"
name of output directory
.IP "\fB-P\fR, \fB--progress\fR"
print progress bar in batch mode
.IP "\fB-S\fR, \fB--syntax\fR=<\fItype\fR|\fIpath\fR>"
set type of source code, necessary if input file suffix is missing. The syntax may also be defined as path of the language file.
.IP "\fB--syntax-by-name\fR=<\fIname\fR>"
specify type of source code by given name.  Will not read a file of this name, useful for stdin and to determine the syntax of the file before piping its content to highlight. This option overrides --syntax.
.IP "\fB--syntax-supported\fR"
test if the given syntax can be loaded and print the result  (assumes -S or --syntax-by-name)
.IP "\fB-v\fR, \fB--verbose\fR"
print debug info to stderr; repeat to show more information
.IP "\fB-q\fR, \fB--quiet\fR"
suppress progress info in batch mode
.IP "\fB--force\fR[=\fIsyntax\fR]"
generate output if input syntax is unknown. The fallback syntax may be set here, Plain Text is default.
.IP "\fB--list-scripts\fR=<\fItype\fR>"
list installed scripts
<type> = [langs, themes, plugins]
.IP "\fB--list-cat\fR=<\fIcategories\fR>"
filter the scripts by the given categories (example: --list-cat='source;script')
.IP "\fB--max-size\fR=<\fIsize\fR>"
set maximum input file size (examples: 512M, 1G; default: 256M)
.IP "\fB--plug-in\fR=<\fIscript\fR>"
execute Lua plug-in script; repeat option to apply multiple plug-ins
.IP "\fB--plug-in-param\fR"
set plug-in input parameter. This might be an input file name (ie. 'tags').
.IP "\fB--print-config\fR"
print path configuration
.IP "\fB--print-style\fR"
print stylesheet only (see --style-outfile)
.IP "\fB--skip\fR=<\fIlist\fR>"
ignore listed unknown file types (example: --skip='bak;c~;h~')
.IP "\fB--stdout\fR"
output to stdout (batch mode, --print-style)
.IP "\fB--validate-input\fR"
test if input is a valid text file
.IP "\fB--version\fR"
print version and copyright info

.SH OUTPUT FORMATTING OPTIONS
.IP "\fB-O\fR, \fB--out-format\fR=<\fIformat\fR>"
output file in given format
<format>=[html, xhtml, latex, tex, rtf, odt, ansi, xterm256, truecolor, bbcode, pango, svg]
.IP "\fB-c\fR, \fB--style-outfile\fR=<\fIfile\fR>"
name of style definition file
.IP "\fB-T\fR, \fB--doc-title\fR"
document title
.IP "\fB-e\fR, \fB--style-infile\fR=<\fIfile\fR>"
name of file to be included in style-outfile
.IP "\fB-f\fR, \fB--fragment\fR"
omit header and footer of the output document (see --keep-injections)
.IP "\fB-F\fR, \fB--reformat\fR=<\fIstyle\fR>"
reformat output in given style.
<style>=[allman, gnu, google, horstmann, java, kr, linux, lisp, mozilla, otbs, pico, vtk, ratliff, stroustrup, webkit, whitesmith]
.IP "\fB-I\fR, \fB--include-style\fR"
include style definition in output
.IP "\fB-J\fR, \fB--line-length\fR=<\fInum\fR>"
line length before wrapping (see -V, -W)
.IP "\fB-j\fR, \fB--line-number-length\fR=<\fInum\fR>"
line number length incl. left padding. Default length: 5
.IP "\fB-k\fR, \fB--font\fR=<\fIfont\fR>"
set font (specific to output format)
.IP "\fB-K\fR, \fB--font-size\fR=<\fInum?\fR>"
set font size (specific to output format)
.IP "\fB-l\fR, \fB--line-numbers\fR"
print line numbers in output file
.IP "\fB-m\fR, \fB--line-number-start\fR=<\fIcnt\fR>"
start line numbering with cnt (assumes -l)
.IP "\fB--line-range\fR=<\fIstart\fR-\fIend\fR>"
output only lines from number <start> to <end>
.IP "\fB-s\fR, \fB--style\fR=<\fIstyle name\fR|\fIpath\fR>"
set highlighting style (theme). Add 'base16/' prefix to use a Base16 theme. The theme may also be defined as path of the theme file.
.IP "\fB-t\fR  \fB--replace-tabs\fR=<\fInum\fR>"
replace tabs by num spaces
.IP "\fB-u\fR, \fB--encoding\fR=<\fIenc\fR>"
set output encoding which matches input file encoding; omit encoding information if set to "NONE"
.IP "\fB-V\fR, \fB--wrap-simple\fR"
wrap lines after 80 (default) characters without indenting function parameters and statements.
.IP "\fB-W\fR, \fB--wrap\fR"
wrap lines after 80 (default) characters (use with caution).
.IP "\fB-z\fR, \fB--zeroes\fR"
fill leading space of line numbers with zeroes
.IP "\fB--isolate\fR"
output each syntax token in separate tags (verbose output)
.IP "\fB--keep-injections\fR"
output plug-in header and footer injections in spite of -f
.IP "\fB--kw-case\fR=<\fIupper\fR|\fIlower\fR|\fIcapitalize\fR>"
output all keywords in given case if language is not case sensitive
.IP "\fB--no-trailing-nl\fR[=\fImode\fR]"
omit trailing newline. If mode is "empty-file", omit only for empty input
.IP "\fB--no-version-info\fR"
omit version info comment
.IP "\fB--wrap-no-numbers\fR"
omit line numbers of wrapped lines (assumes -l)

.SH "(X)HTML OPTIONS"
.IP "\fB-a\fR, \fB--anchors\fR"
attach anchors to line numbers (HTML only)
.IP "\fB-y\fR, \fB--anchor-prefix\fR=<\fIstr\fR>"
set anchor name prefix
.IP "\fB-N\fR, \fB--anchor-filename\fR"
use input file name as anchor name
.IP "\fB-C\fR, \fB--print-index\fR"
print index file with links to all output files
.IP "\fB-n\fR, \fB--ordered-list\fR"
print lines as ordered list items
.IP "\fB--class-name\fR=<\fIstr\fR>"
set CSS class name prefix; omit class name if set to "NONE"
.IP "\fB--inline-css\fR"
output CSS within each tag (verbose output)
.IP "\fB--enclose-pre\fR"
enclose fragmented output with pre tag (assumes -f)

.SH "LATEX OPTIONS"
.IP "\fB-b\fR, \fB--babel\fR"
disable Babel package shorthands
.IP "\fB-r\fR, \fB--replace-quotes\fR"
replace double quotes by \\dq
.IP "\fB--beamer\fR"
adapt output for the Beamer package
.IP "\fB--pretty-symbols\fR"
improve appearance of brackets and other symbols

.SH "RTF OPTIONS"
.IP "\fB--page-color\fR"
include page color attributes
.IP "\fB-x\fR, \fB--page-size\fR=<\fIsize\fR>"
set page size, <size>=[a3, a4, a5, b4, b5, b6, letter]
.IP "\fB--char-styles\fR"
include character stylesheets

.SH "SVG OPTIONS"
.IP "\fB--height\fR=<\fIh\fR>"
set image height (units allowed)
.IP "\fB--width\fR=<\fIw\fR>"
set image size (see --height)

.SH "TERMINAL ESCAPE OUTPUT OPTIONS (XTERM256 OR TRUECOLOR)"
.IP "\fB--canvas\fR[=\fIwidth\fR]"
set background colour padding (default: 80)

.SH "LANGUAGE SERVER OPTIONS"
.IP "\fB--ls-profile\fR=<\fIserver\fR>"
load LSP configuration from lsp.conf
.IP "\fB--ls-delay\fR=<\fIms\fR>"
set server initialization delay in milliseconds
.IP "\fB--ls-exec\fR=<\fIbin\fR>"
set server executable name
.IP "\fB--ls-option\fR=<\fIoption\fR>"
set server CLI option (can be repeated)
.IP "\fB--ls-hover\fR"
execute hover requests (HTML output only)
.IP "\fB--ls-semantic\fR"
query server for semantic token types (requires LSP 3.16)
.IP "\fB--ls-syntax\fR=<\fIlang\fR>"
set syntax which is understood by the server
.IP "\fB--ls-syntax-error\fR"
retrieve syntax error information (assumes --ls-hover or --ls-semantic)
.IP "\fB--ls-workspace\fR=<\fIdir\fR>"
set workspace directory to initialize the server
.IP "\fB--ls-legacy\fR"
do not require a server capabilities response

.SH ENV VARIABLES
Highlight recognizes these variables:
.IP "\fIHIGHLIGHT_DATADIR\fR"
sets the path to highlight's configuration scripts
.IP "\fIHIGHLIGHT_OPTIONS\fR"
may contain command line options, but no input file paths.

.SH HINTS
If no in- or output files are specified, stdin and stdout will be used for in- or output.
Reading from stdin can also be triggered by the '-' option.

Default output format: xterm256 or truecolor if appropriate, HTML otherwise.

Style definitions are stored in highlight.css (HTML, XHTML, SVG) or
highlight.sty (LaTeX, TeX) if neither -c nor -I is given. For CSS, definitions
are stored in the output document header with -I, if -f is also given there
will be no style definitions.

Reformatting code (-F) will only work with C, C++, C# and Java input files.

LSP features require absolute input paths and disable reformatting (-F).

.SH BUGS
Wrapping lines with -V or -W will cause faulty highlighting of long single line comments and directives.
Using line-range might interfere with multi line syntax elements. Use with caution.
.SH FILES
The configuration files are stored in \fI/usr/share/highlight/\fR.
Language definitions, themes and plugins are located in subdirectories.
.PP
Documentation files are stored in \fI/usr/share/doc/highlight/\fR,
configuration files in \fI/etc/highlight/\fR.
.PP
See README how to install own scripts in the home directory.
.SH EXAMPLES
Single file conversion:
.PP
highlight -o hello.html -i hello.c
.PP
highlight -o hello.html hello.c
.PP
highlight -o hello.html -S c < hello.c
.PP
highlight -S c < hello.c > hello.html
.PP
Note that a file highlight.css is created in the current directory.
.PP
Batch file processing:

highlight --out-format=xhtml  -B '*.cpp' -d /home/you/html_code/
.PP
converts all *.cpp files in the current directory and its subdirectories to
xhtml files, and stores the output in /home/you/html_code.
.PP
highlight --out-format=latex  * -d /home/you/latex_code/
.PP
converts all files to LaTeX, stored in /home/you/latex_code/.
.PP
Use --quiet to improve performance of batch file processing (recommended for usage in shell scripts).
.PP
Use highlight --out-format=xterm256 <yourfile> | less -R to display a source file in a terminal.
.PP
Run highlight --list-scripts=langs to see all supported syntax types.

.SH AUTHORS
Andre Simon <as@andre-simon.de>
.SH SEE ALSO
README files and http://www.andre-simon.de/.
